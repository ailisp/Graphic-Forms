(in-package :graphic-forms.uitoolkit.tests)

(define-test layout-attributes-test
  (let ((widget1 (make-instance 'mock-widget :handle (cffi:make-pointer 1234)))
        (widget2 (make-instance 'mock-widget :handle (cffi:make-pointer 5678))))
    (let ((data1 (list widget1 (list 'a 1 'b 2)))
          (data2 (list widget2 (list 'a 10 'c 30)))
          (layout (make-instance 'gfw:layout-manager)))
      (setf (slot-value layout 'gfw::data) (list data1 data2))
      (assert-equal 1 (gfw:layout-attribute layout widget1 'a))
      (assert-equal 2 (gfw:layout-attribute layout widget1 'b))
      (let ((tmp (gfw::obtain-children-with-attribute layout 'b)))
        (assert-equal 1 (length tmp))
        (assert-true (cffi:pointer-eq (gfs:handle (car (first tmp))) (gfs:handle widget1))))
      (assert-equal 10 (gfw:layout-attribute layout widget2 'a))
      (assert-equal 30 (gfw:layout-attribute layout widget2 'c))
      (let ((tmp (gfw::obtain-children-with-attribute layout 'c)))
        (assert-equal 1 (length tmp))
        (assert-true (cffi:pointer-eq (gfs:handle (car (first tmp))) (gfs:handle widget2))))
      (assert-true (null (gfw::obtain-children-with-attribute layout 'd)))
      (setf (gfw:layout-attribute layout widget1 'b) 66
            (gfw:layout-attribute layout widget2 'd) 100)
      (assert-equal 1 (gfw:layout-attribute layout widget1 'a))
      (assert-equal 66 (gfw:layout-attribute layout widget1 'b))
      (assert-equal 10 (gfw:layout-attribute layout widget2 'a))
      (assert-equal 30 (gfw:layout-attribute layout widget2 'c))
      (assert-equal 100 (gfw:layout-attribute layout widget2 'd)))))
